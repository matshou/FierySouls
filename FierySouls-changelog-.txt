Version 1.2.4

- Resolved an issue that prevented torch entity items from loading into the world.
- Wrote a custom EntityItem registration method to handle these things in the future.
- Made some minor modifications in ResourceLibrary and CommonProxy classes.

Version 1.2.3

- Fixed a bug that was caused by the last version update. 
  The bug would disable torch tile entities from updating properly and corrupt the current world instance.
- Did some minor security improvements.

Version 1.2.2

- Create a new class for publicly shared defines.
- Moved all defines from TileTorchEntity.

Version 1.2.1

- Renamed "getItemInstance" method to "getItem" in 'ResourceLibrary'.
- Renamed "getBlockInstance" method to "getBlock" in 'ResourceLibrary'.

- Renamed "isInstanceItem" method to "isResourceItem" in 'ResourceLibrary'.
- Renamed "isInstanceBlock" method to "isResourceBlock" in 'ResourceLibrary'.

Note:
This will improve ascription accuracy and readability of these methods.

Version 1.2.0

- Added a custom class for both torch blocks and torch items.
- Events can now be intercepted with a new class called EventHandler in "fierysouls\common".
- The resource library has a few new methods to handle initialization of item and block resources.
- Created a new class called "Utilities" for all those miscelaneous methods floating around.

- Torches now have a custom EntityItem class. When they are dropped or tossed from player 
  inventory or dropped by a block they will also collect humidity just like tile entities.

- Torch items (item stacks) now also hold custom NBT data, just like tile entities.
  This data will be inherited from both tile entities and entity items and vice versa.

Notes:
I've spent a lot of time working on this update, trying to figure out an elegant way of implementing data inheritance.
First step was simple, create a custom item and entity item class and properly set them up so they work. The following step
was fairly simple as well, connecting these classes to the rest of the code and making it all work together.

The tricky part was (as I said before) figuring out an elegant and efficient way of taking custom NBT data from a tile entity,
and giving it to an entity item. My first thought was to use NBTTagCompounds, however the problem there was that the Item class
was static and the only way for it to hold data was through the use of "metadata" a single integer. So I've spent two days studying 
how item metadata works and writing methods for storing and loading data from it. When you have more then one number and you're 
limited to using a single integer as a storage container things get a bit complicated. I'm still learning Java so this was a bit of
a challenge for me, however I think I did a good job making it work. This was of course before I found out that ItemStacks could
store custom NBT data for items, which means this was a superior alternative to trying to push all our info in an integer.

Data inheritance seems to work for now, the torch can be placed as a block, harvested, tossed or dropped in to the world, picked up again
and placed as a block all without losing it's custom NBT data. One thing that's missing is that torch items do not yet update these values on their own.

Version 1.1.7

- Fixed a recently created bug where torches were not emitting smoke particles after expiring or being extinguished by rain.
- Removed a miscalculation that prevented lit torches from correctly updating combustion duration values.
- The light data is now actually calculated with accuracy and the recalculation seems to work.

Version 1.1.6

- Removed default initialization of most torch tile entity variables from class constructors.
- Fixed formatting, improved comments and made the code a bit more readable.

Version 1.1.5

Changelog:

- Changed torch light level value to the one vanilla torches use.
- Fixed a bug that would crash the game when lit torches entities would expire.
- Improved custom torch light values and the way these values are calculated. Light will start diminishing after a fixed period of elapsed time.
  It will also look a bit more pretty now because it does not completely diminish, after reaching a line where it starts to look weird it stops.

- Torch light is now properly applied to lit torches after loading the world with existing entities.
  Since light data was not recalculated after re-loading the world light data would just initialize a with default value.

Version 1.1.4

Changelog:

- The strength of light ignited torches emit in their environment is now parameterized.
  It will slowly start to diminish when the torch is nearing the end of it's life cycle. 

- Implemented defined update intervals for torch tile entities.
  This should improve the performance quality of these entities.
  
- Removed redundant comments and code blocks from BlockTorchLit.

Version 1.1.3

Changelog:

- Implemented torch combustion, they will not extinguish after a defined period of time has passed.
- The torch will now actually burn out becoming a permanent unlit torch unable to be ignited by fire again.
- Did a little bit of code formatting, nothing major.

Version 1.1.2

Changelog:

- Added a new recipe for unlit torches. They can now be crafted with charcoal.
- Any custom resource can now be crafted with more then one recipes.
- All vanilla torch recipes are now correctly removed from the list.
- Added .gitignore rules to the project, the repository can now be hosted inside Forge DE.

Notes:
This version resolves the issue of a charcoal torch recipe not being removed from the CraftingManager recipe list.
It took me quite a while to figure out what was causing this, and in the end it turned out it was just a problem of accessing the wrong index.
This topic on the Forge forum helped me solve this: 
http://www.minecraftforge.net/forum/index.php/topic,34940

Version 1.1.1

Changelog:

- Added a client version limiter.
- Cleaned up redundant imports in Item and TileEntity packages.
- Tile entities are now able to read and write data using NBT.
- Added a missing entry in the changelog.
- Updated the Git license file.

Version 1.1.0

Changelog:

- Did some considerable changes to torch tile entity code.
- Introduced new mechanics for torches, humidity. When directly exposed to rain torches start to collect humidity
  and extinguish if enough humidity is accumulated. After getting considerably wet they are unable to be ignited again with fire sources.

- Fiery Souls creative tab is now displaying the correct name.
- Fixed a formatting mistake in the license part of the readme.

Notes:
The tile entities are still not able to save data, I will implement this in the next update.


Version 1.0.1, Build 105 
 
Changelog: 
 
- Introduced client and server proxies. The mod should be multiplayer friendly now. 
- Implemented custom object handler that takes care of item and block initialization and registration for us. 
- Our custom torches are now both blocks and tile entities. 
 
- Matchbox can no longer light torches on fire when the torch is directly exposed to rain. 
- Torches can be extinguished by activating them with no item equipped in our hands or directly exposing them to rain  
  and ignited with either a matchbox or a lit torch equipped in our hands. 
- Torches can only be extinguished by strong rain and no longer extinguish exactly the moment they are placed on rain. 
- After being extinguished, torches will emit small smoke particles for a short period of time.  
 
- Added recipes for our custom torches and removed vanilla torch recipes. 
- Ignited torches now have a probability (based on block flammability data) to set blocks above them on fire.

Notes: 
This project originally started as a fork of another project founded and actively developed by ChaosTheDude on GitHub. 
The project was aiming at improving the functionality and realism of vanilla torches. Since the author of the mentioned 
project did not want to co-develop the project with me and shares a different vision of open source development I decided 
to expand my own project and migrate to a new repository. 
 
I've copied the last version in the fork and worked on it until it was stable enough to be a good base. 
Since at the moment I am the only one developing this mod and this is a fresh start a good idea would be to establish 
various development conventions: each commit should contain a changelog like this, version number convention should be  
(Major version).(Minor version).(Revision iteration)-(Build number). 