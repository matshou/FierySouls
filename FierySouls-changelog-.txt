Version 1.5.1

- Added a new config category called "Utility Configurations".
- Added the mod logger threshold option to config.

Version 1.5.0

- A secondary mod log file system has been implemented.
  
Notes: A secondary log system means that we now have a separate log file that we can write to in addition 
       to the log4j logger. We can periodically take a look in that log file and it will give us the exact
	   time and date an event happened. Then we use that info to find the stack trace in the FML-client log.
    
Version 1.4.12

- Torch items now properly stack, both in player's inventory and in the world as EntityItems.
- Implemented 'onWorldTick' server-side ticker in EventHandler.
- ExtendedItemProperties are now added to torch stacks by default.
- Unlit torches have their stacks now limited to 10 items.

Version 1.4.11

- Changed names of some objects and methods in SharedDefines.
- Refactored and optimized some code blocks in the ItemTorch class.

- Fixed a bug that caused lighting a torch in an off-hand slot to add a new lit torch
  without removing the old one in the off-hand slot.
- Fixed another bug that caused duplicate torches to spawn when ItemTossEvent was called.

Version 1.4.10

- Fixed an issue that caused unlit torch items to not light when used on lit torch blocks.
- Reverted back to not using registrations for EntityItems, check notes for more info.
- Torches can now be used for digging without interrupting the block breaking progress.

Notes: Reverted back to an unregistered EntityItem setup because the tossed/dropped item was behaving very strange.
       I've tried many things to fix this but nothing really work. I am currently awaiting response from the Forge
	   community after asking for help on their forum: http://www.minecraftforge.net/forum/index.php?topic=42391.0

Version 1.4.9

- Organized imports for all classes in the project.

Version 1.4.8

- Resolves #9: Torch EntityItems are incorrectly displayed.

Version 1.4.7

- Brought back SharedDefines and moved some stuff there.
- Updated all of the EntityItemTorch functions to 1.10 standards.
- Updated most of the ItemTorch functions to 1.10 standards.
- Drastically improved on the original code base for the above changes.

Notes: The way we handle EntityItems inheriting NBT compound data from TileEntity is quite different now.
       We simply intercept the stack just before the EntityItem is about to form and pass the data, and as 
	   the entity is properly registered, everything else is properly handled by Forge.
	   This gets rid of a lot of unnecessary code we used to use.

Version 1.4.6

- Added a configuration option for torch oxygen sensitivity.
- Changed the way items and blocks are being registered with Forge.
- Lit and unlit torch items now have dedicated classes.

Version 1.4.5

- SharedDefines class file has been removed.
- Changed "humidityLevel" variable data type from short to integer.
- Added a multiple torch update type system (this means multiple update clocks).
- Torches will now extinguish much faster if they are enclosed with solid blocks.

Version 1.4.4

- Modified the torch humidity threshold value.
- Created a new class for all new custom sound events.
- Matchbox items will now produce a custom sound when used.

Version 1.4.3

- Resolved issue #8 (Duplicate elements in config...)
- Fixed an unreported issue that was preventing the config file from getting updated on data change.
- Added 'torch fire hazard' function main variable to config file.
- Updated .classpath, .project and added some new rules to .gitignore.

Version 1.4.2

- Burning torches now have a chance to set fire to the block above them,
  and under certain conditions those around them.
- Torch TileEntities will now properly respect the rule of update intervals.  

Version 1.4.1

- Added in-game mouseover descriptions for all items.
- Created a custom ItemBlock class for torches.

Version 1.4.0
- Implemented a GUI powered config sytem with categories.
- Torch config have been added and tested with this system.

Version 1.3.8

Updated Features:
- Torches collect humidity from rain.
- Lit torch blocks extinguish when exposed to rain.
- Lit torch blocks extinguish after a defined period of time.
- When extinguished by rain torches will now produce smoke for a short random time.

New Features:
- Changed Matchbox recipe to include planks instead of sticks.

Version 1.3.7

- Added a tile entity registering function.
- Implemeneted Tile Entities for torch blocks.
- SharedDefines have been added for future config purposes.

Version 1.3.6
-----------------------------------------------------------------------
Updated Features:
- Torch blocks extinguish when right-clicked.
- Torches can be ignited by right-clicking them with a lit torch equipped,
  right-clicking ignited block torches with an unlit torch equipped, or using a matchbox.
- Lit torch blocks produce a fixed value dim light.

Fixes and Implementations:
- All recipes imported and tested.
- Fixed an alpha value issue that appeared on the edges of the matchbox item.
- Decreased the number of matches per stack from 25 to 20.

New Features:
- Torches make a 'fiss' noise when extinguished.
- Torch blocks produce a constant 'fire ambient' noise when lit.


Version 1.3.5 - The first 1.10 update
------------------------------------------------------------------------
- Started working on making the code compatible with Minecraft 1.10.
- The ResourceLibrary has a much more simpler and MC friendly design.
- Most of the code had to be removed until I rewrite and integrate it into the new framework.

Version 1.3.4

- Slightly increased item torch range.
- Torch items will now be instantly extinguished when used (activated) on water blocks.
  They will also get instantly extinguished when used as a tool to break a block that is underwater or behind a waterfall. 

Version 1.3.3

- Torches can no longer replace fire, lava and water blocks by being placed in their position. 
  This was implemented in the last version but did not work as intended.
  
- Torches will now properly be set on fire when activated on fire and lava.

Version 1.3.2

- Unlit torch items can now be set on fire by using them on lava or fire blocks.
- Trying to break blocks with a lit torch as a tool will now extinguish it after a few update intervals.
- Implemented a range restriction for placing torch blocks, should do this for all items with time.

Version 1.3.1

- Fixed a bug that caused unlit entity torch items to update combustion.
- Created extended properties for mod items that can be used for anything.
- Resolved an issue that disrupted block breaking progress when trying to break blocks with a torch.

Version 1.3.0

- Reconfigured and changed the way the torch light system works, it's more modular now.
- The last update did not implement humidity updates properly for torch items, hopefully this should be fixed now.
- Corrected an error which caused torch items to stop updating. This was introduced with the last commit where 
  we stopped using 'total' world time in ItemTorch.
 
Note: Started working more seriously on the torch light system.
 
Version 1.2.12

- Fixes an NBT inheritance problem between lit torch blocks and unlit torch items.
- Prevents unlit torches from dealing fire damage when hitting entities.
- Torch humidity will now be updated when the item is in player inventory.
- Lit torch items are now limited to one item per stack.

Version 1.2.11

- When used as weapons to attack; torches will now deal fire damage on impact,
  they also have a small chance of setting the target entities on fire.

Version 1.2.10

- Made comments look more pretty and give more accurate information.
- Reorganized methods in ItemTorch class.

Version 1.2.9

- Fixed a typo affecting unlit torches in ResourceLibrary.
- Torches in the hotbar will now be lit on fire when the player enters a pool of lava.

- Torch items and entities will now have their combustion duration updated.
  The durability bar in the GUI will be updated based on combustion duration as well.

Version 1.2.8

- Torches now drop custom EntityItem when harvested in survival mode.

Version 1.2.7

- Torches now have a 50-50% chance (as opposed to being 100% so far) of being extinguished 
  when knocked from blocks due to their destruction. Thinking of making this value a variable...

- Torch items (item stacks) are now updated on set intervals.
- Prevented the Item "bobbing" animation from occurring when updating metadata or NBT values.

Notes:
Discovering how to prevent the animation was a long process and quite a frustrating one, until I read this post:
http://www.minecraftforge.net/forum/index.php/topic,30937.0.html

Version 1.2.6

- Changed the way network torch tile entity network utilities function and interact.
- Improved the safety of some methods in 'TileEntityTorchUnlit'.
- Restructured a lot of code in 'TileEntityTorchLit'.

- The way torch tile entities communicate and inherit data when being extinguished has changed a lot,
  read the notes below for more information.

Notes:
The system we used before was to wait for the lit torch entity's client side to change blockstate and spawn smoke particles.
Then we called server from client side and extinguished the torch on it's side. The obvious problem here is that it only works
if there in only one client in the game. When you have more clients in this situation, the first one to call the server and destroy
the master instance is the only one who knows what happened as the rest don't get the chance to find out. Now we use NBT to sync
client and server when communicating between unlit tile entity instances.

Version 1.2.5

- Created two new helper methods in ResourceLibrary.
- When torch items are dropped in water they now become completely wet.
- When the player submerges himself in water all torches in his inventory will become wet and extinguished.

Version 1.2.4

- Resolved an issue that prevented torch entity items from loading into the world.
- Wrote a custom EntityItem registration method to handle these things in the future.
- Made some minor modifications in ResourceLibrary and CommonProxy classes.

Version 1.2.3

- Fixed a bug that was caused by the last version update. 
  The bug would disable torch tile entities from updating properly and corrupt the current world instance.
- Did some minor security improvements.

Version 1.2.2

- Create a new class for publicly shared defines.
- Moved all defines from TileTorchEntity.

Version 1.2.1

- Renamed "getItemInstance" method to "getItem" in 'ResourceLibrary'.
- Renamed "getBlockInstance" method to "getBlock" in 'ResourceLibrary'.

- Renamed "isInstanceItem" method to "isResourceItem" in 'ResourceLibrary'.
- Renamed "isInstanceBlock" method to "isResourceBlock" in 'ResourceLibrary'.

Note:
This will improve ascription accuracy and readability of these methods.

Version 1.2.0

- Added a custom class for both torch blocks and torch items.
- Events can now be intercepted with a new class called EventHandler in "fierysouls\common".
- The resource library has a few new methods to handle initialization of item and block resources.
- Created a new class called "Utilities" for all those miscelaneous methods floating around.

- Torches now have a custom EntityItem class. When they are dropped or tossed from player 
  inventory or dropped by a block they will also collect humidity just like tile entities.

- Torch items (item stacks) now also hold custom NBT data, just like tile entities.
  This data will be inherited from both tile entities and entity items and vice versa.

Notes:
I've spent a lot of time working on this update, trying to figure out an elegant way of implementing data inheritance.
First step was simple, create a custom item and entity item class and properly set them up so they work. The following step
was fairly simple as well, connecting these classes to the rest of the code and making it all work together.

The tricky part was (as I said before) figuring out an elegant and efficient way of taking custom NBT data from a tile entity,
and giving it to an entity item. My first thought was to use NBTTagCompounds, however the problem there was that the Item class
was static and the only way for it to hold data was through the use of "metadata" a single integer. So I've spent two days studying 
how item metadata works and writing methods for storing and loading data from it. When you have more then one number and you're 
limited to using a single integer as a storage container things get a bit complicated. I'm still learning Java so this was a bit of
a challenge for me, however I think I did a good job making it work. This was of course before I found out that ItemStacks could
store custom NBT data for items, which means this was a superior alternative to trying to push all our info in an integer.

Data inheritance seems to work for now, the torch can be placed as a block, harvested, tossed or dropped in to the world, picked up again
and placed as a block all without losing it's custom NBT data. One thing that's missing is that torch items do not yet update these values on their own.

Version 1.1.7

- Fixed a recently created bug where torches were not emitting smoke particles after expiring or being extinguished by rain.
- Removed a miscalculation that prevented lit torches from correctly updating combustion duration values.
- The light data is now actually calculated with accuracy and the recalculation seems to work.

Version 1.1.6

- Removed default initialization of most torch tile entity variables from class constructors.
- Fixed formatting, improved comments and made the code a bit more readable.

Version 1.1.5

Changelog:

- Changed torch light level value to the one vanilla torches use.
- Fixed a bug that would crash the game when lit torches entities would expire.
- Improved custom torch light values and the way these values are calculated. Light will start diminishing after a fixed period of elapsed time.
  It will also look a bit more pretty now because it does not completely diminish, after reaching a line where it starts to look weird it stops.

- Torch light is now properly applied to lit torches after loading the world with existing entities.
  Since light data was not recalculated after re-loading the world light data would just initialize a with default value.

Version 1.1.4

Changelog:

- The strength of light ignited torches emit in their environment is now parameterized.
  It will slowly start to diminish when the torch is nearing the end of it's life cycle. 

- Implemented defined update intervals for torch tile entities.
  This should improve the performance quality of these entities.
  
- Removed redundant comments and code blocks from BlockTorchLit.

Version 1.1.3

Changelog:

- Implemented torch combustion, they will now extinguish after a defined period of time has passed.
- The torch will now actually burn out becoming a permanent unlit torch unable to be ignited by fire again.
- Did a little bit of code formatting, nothing major.

Version 1.1.2

Changelog:

- Added a new recipe for unlit torches. They can now be crafted with charcoal.
- Any custom resource can now be crafted with more then one recipes.
- All vanilla torch recipes are now correctly removed from the list.
- Added .gitignore rules to the project, the repository can now be hosted inside Forge DE.

Notes:
This version resolves the issue of a charcoal torch recipe not being removed from the CraftingManager recipe list.
It took me quite a while to figure out what was causing this, and in the end it turned out it was just a problem of accessing the wrong index.
This topic on the Forge forum helped me solve this: 
http://www.minecraftforge.net/forum/index.php/topic,34940

Version 1.1.1

Changelog:

- Added a client version limiter.
- Cleaned up redundant imports in Item and TileEntity packages.
- Tile entities are now able to read and write data using NBT.
- Added a missing entry in the changelog.
- Updated the Git license file.

Version 1.1.0

Changelog:

- Did some considerable changes to torch tile entity code.
- Introduced new mechanics for torches, humidity. When directly exposed to rain torches start to collect humidity
  and extinguish if enough humidity is accumulated. After getting considerably wet they are unable to be ignited again with fire sources.

- Fiery Souls creative tab is now displaying the correct name.
- Fixed a formatting mistake in the license part of the readme.

Notes:
The tile entities are still not able to save data, I will implement this in the next update.


Version 1.0.1, Build 105 
 
Changelog: 
 
- Introduced client and server proxies. The mod should be multiplayer friendly now. 
- Implemented custom object handler that takes care of item and block initialization and registration for us. 
- Our custom torches are now both blocks and tile entities. 
 
- Matchbox can no longer light torches on fire when the torch is directly exposed to rain. 
- Torches can be extinguished by activating them with no item equipped in our hands or directly exposing them to rain  
  and ignited with either a matchbox or a lit torch equipped in our hands. 
- Torches can only be extinguished by strong rain and no longer extinguish exactly the moment they are placed on rain. 
- After being extinguished, torches will emit small smoke particles for a short period of time.  
 
- Added recipes for our custom torches and removed vanilla torch recipes. 
- Ignited torches now have a probability (based on block flammability data) to set blocks above them on fire.

Notes: 
This project originally started as a fork of another project founded and actively developed by ChaosTheDude on GitHub. 
The project was aiming at improving the functionality and realism of vanilla torches. Since the author of the mentioned 
project did not want to co-develop the project with me and shares a different vision of open source development I decided 
to expand my own project and migrate to a new repository. 
 
I've copied the last version in the fork and worked on it until it was stable enough to be a good base. 
Since at the moment I am the only one developing this mod and this is a fresh start a good idea would be to establish 
various development conventions: each commit should contain a changelog like this, version number convention should be  
(Major version).(Minor version).(Revision iteration)-(Build number). 